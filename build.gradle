plugins {
	id 'org.ajoberstar.grgit' version '4.0.1'
  id "com.github.johnrengelman.shadow" version "5.2.0"
  id "com.jfrog.bintray" version "1.8.5"
}


apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'

allprojects {
	group = project.group
	version = project.version
}

archivesBaseName = project.archives_base_name
ext {
	CHANGELOG = rootProject.file('build/changelog.txt')
}


def addJ9Support = JavaVersion.current().java9Compatible
sourceCompatibility = targetCompatibility = 8

sourceSets {
	main.java.srcDirs 'src'
	test.java.srcDirs 'test'
	if (addJ9Support) java9.java.srcDirs 'java9'
}

repositories {
	jcenter()
	maven { url = "https://libraries.minecraft.net/" }
}

dependencies {
	if (addJ9Support) {
		// The Java9 code depends on (can see) the "main" source set
		java9Implementation files(sourceSets.main.output.classesDirs) { builtBy compileJava }
	}

	testCompile 'junit:junit:4.+'
	testCompile 'org.hamcrest:hamcrest-core:1.3'
	testCompile 'org.assertj:assertj-core:3.+'
	testCompile 'com.google.code.gson:gson:2.8.0'
}

// Default all standard Java compile tasks to Java 8
// We'll specify Java 9 only for the java9 compile task
tasks.withType(JavaCompile) {
	options.encoding = 'utf-8'
	options.deprecation = true
	sourceCompatibility = 8
	targetCompatibility = 8
	if (addJ9Support) options.compilerArgs.addAll(['--release', '8'])
}

if (addJ9Support) {
	compileJava9Java {
		options.encoding = 'utf-8'
		sourceCompatibility = 9
		targetCompatibility = 9
		options.compilerArgs.addAll(['--release', '9'])
	}
}


eclipse {
	classpath {
		if (addJ9Support) sourceSets -= [sourceSets.java9]
	}
	project {
		name 'ForgeFlower'
	}
}


jar {
	if (addJ9Support) {
		into('META-INF/versions/9') {
			from sourceSets.java9.output
		}
	}
	manifest {
		attributes(
			'Main-Class' : 'org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler',
			'Multi-Release': 'true'
		)
	}
}

task sourceJar(type: Jar) {
	classifier 'sources'
	from sourceSets.main.allJava
}

artifacts {
	archives sourceJar
}

shadowJar {
  relocate 'org.jetbrains.java.decompiler', 'fudge.forgedflower'
  relocate 'net.fabricmc.fernflower', 'fudge.forgedflower'

  classifier = ''
}

publishing {
	publications {
		shadow(MavenPublication) {publication ->
      project.shadow.component(publication)
			if (CHANGELOG.exists()) {
				artifact source: CHANGELOG, classifier: 'changelog'
			}
			artifact tasks.sourceJar

			pom {
				groupId = project.group
				version = project.version
				artifactId = project.archivesBaseName
				name = project.archivesBaseName
				packaging = 'jar'
				description = 'Fernflower from https://github.com/JetBrains/intellij-community as standalone library, With Forges Modifications and with Fabric additions'
				url = 'https://github.com/natanfudge/ForgedFlower'

				scm {
					url = 'https://github.com/natanfudge/ForgedFlower'
					connection = 'scm:git:git://github.com/natanfudge/ForgedFlower.git'
					developerConnection = 'scm:git:git@github.com/natanfudge/ForgedFlower.git'
				}
				issueManagement {
					system = 'github'
					url = 'https://github.com/natanfudge/ForgedFlower/issues'
				}

				licenses {
					license {
						name = 'Apache License 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0'
						distribution = 'repo'
					}
				}
			}
		}
	}
	repositories {
		maven {
			if (project.hasProperty('mavenPassword')) {
				credentials {
					username = project.properties.mavenUser
					password = project.properties.mavenPassword 
				}
				url 'http://files.minecraftforge.net/maven/manage/upload'
			} else {
				url 'file://' + rootProject.file('repo').getAbsolutePath()
			}
		}
	}
}


bintray {
  user = project.hasProperty('bintray_user') ? project.property('bintray_user') : ""
  key = project.hasProperty('bintray_api_key') ? project.property('bintray_api_key') : ""
  publications = ["shadow"]
  publish = true //[Default: false] Whether version should be auto published after an upload
  pkg {
    repo = "libs"
    name = "ForgedFlower"
    licenses = ["apache"]
    version {
      name = project.version
      released = new Date()
    }
  }

}